<program> -> <class_decl> | &
<class_list> -> <class_decl> | &
<class_decl> -> class ident <extend> <class_body> <class_list>
<extend> -> extends ident | &
<class_body> -> { <class_list> <class_body2> }
<class_body2> -> <type> <class_body3> | constructor <method_body> <construct_decls> <method_decls> | &
<class_body3> -> ident <class_body4> | [ ] <vector> ident <method_body> <method_decls>
<class_body4> -> <method_body> <method_decls> | <vector> <extra_var> ; <class_body2>
<var_decls> -> <type> <var_decl> <var_decls> | &
<var_decl> -> ident <vector> <extra_var>
<extra_var> -> , ident <vector> <extra_var> | &
<construct_decls> -> <construct_decl> <construct_decls> | &
<method_decls> -> <method_decl> <method_decls> | &
<var_or_atrib> -> <var_decl> | <atrib_stat>
<type> -> <ctype> | ident
<ctype> -> int | string
<mdm_op> -> * | / | %
<rel_op> -> > | < | <= | >= | == | !=
<pm_op> -> + | -
<pm_op?> -> <pm_op> | &
<vector> -> [ ] <vector> | &
<construct_decl> -> constructor <method_body>
<method_decl> -> <type> <vector> ident <method_body>
<method_body> -> ( <param_list> ) <statement>
<param_list> -> <type> ident <vector> <extra_param> | &
<extra_param> -> , <type> ident <vetor> <extra_param> | &
<statement> -> <ctype> <var_decl> ; | ident <var_or_atrib> ; | <print_stat> ; | <read_stat> ; | <if_stat> | <for_stat> | <return_stat> ; | { <stat_list> } | break ; | ;
<read_stat> -> read ident <lvalue>
<print_stat> -> print <expression>
<atrib_stat> -> <lvalue> = <expr_or_aloc>
<expr_or_aloc> -> <expression> | <aloc_expression>
<expression?> -> <expression> | &
<return_stat> -> return <expression?>
<else> -> else <statement> | &
<if_stat> -> if ( <expression> ) <statement> <else>
<for_stat> -> for ( <atrib_stat?> ; <expression?> ; <atrib_stat?> ) <statement>
<stat_list> -> <statement> <stat_list> | &
<lvalue> -> [ <expression> ] <lvalue> | . ident <arg_list?> <lvalue> | &
<[expression]*> -> [ <expression> ] <[expression]*> | &
<aloc_expr2> -> ident <aloc_expr3> | <ctype> [ <expression> ] <[expression]*> 
<aloc_expr3> -> ( <arg_list> ) | [ <expression> ] <[expression]*> 
<aloc_expression> -> new <aloc_expr2>
<opt_expression> -> <rel_op> <num_expression> | &
<expression> -> <num_expression> <opt_expression>
<expression2> -> , <expression> <expression2> | &
<opt_term> -> <pm_op> <term> <opt_term> | &
<num_expression> -> <term> <opt_term>
<unary_expr> -> <pm_op?> <factor>
<unary_vazio> -> <mdm_op> <unary_expr> <unary_vazio> | &
<term> -> <unary_expr> <unary_vazio>
<factor> -> int-const | string-const | null | ident <lvalue> | ( <expression> )
<arg_list> -> <expression> <expression2> | &
<atrib_stat?> -> ident <atrib_stat> | &
<arg_list?> -> ( <arg_list> ) | &
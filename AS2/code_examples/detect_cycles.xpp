class DetectCicles 
{
    class Queue
    {
        int queue[];
        int size;

        constructor()
        {
            size = 0;
        }

        int push(int i)
        {
            queue[size] = i;
            size = size + 1;
            return 0;
        }

        int pop()
        {
            int i, index;
            index = size - 1;
            i = queue[index];
            size = size - 1;
            return i;
        }

        int empty()
        {
            if (size == 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }

        int contains(int needle)
        {
            int i;
            for (i = 0; i < size; i = i+1)
            {
                if (queue[i] == needle)
                {
                    return 1;
                }
            }
            return 0;
        }
    }

    int adj[][];
    int pos[];
    int in[];

    int main() {
        int n;
        for (;;) {
            read n;
            if (n == EOF) {
                break;
            }

            int i;
            for (i = 0; i < n; i = i + 1) {
                pos[i] = 0;
                in[i] = 0;
            }

            int m;
            read m;
            for (i = 0; i < m; i = i + 1){
                int from, to;

                adj[from][pos[from]] = to;
                pos[from] = pos[from] + 1;
                in[to] = in[to] + 1;
            }

            Queue queue;
            queue = new Queue();
            int r;
            for (i = 0; i < n; i = i + 1) {
                if (in[i] == 0) {
                    r = queue.push(i);
                }
            }

            int removed, success;
            remove = 0;
            success = 0;
            for (;;) {
                if (queue.size() == 0) {
                    if (removed == n) {
                        deu = 1;
                        break;
                    } else {
                        break;
                    }
                }

                Queue new_queue;
                new_queue = new Queue();
                for (i = 0; i < queue.size(); i = i+1) {
                    int j;
                    for (j = 0; j < pos[i]; j = j + 1) {
                        in[j] = in[j] - 1;
                        if (in[j] == 0) {
                            r = new_queue.push(j);
                        }
                    }
                    removed = removed + 1;
                }
                queue = new_queue;
            }

            if (deu == 1) {
                print "O grafo nao possu ciclos";
            } else {
                print "O grafo possui ciclos";
            }
        }
    }
}
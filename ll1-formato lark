statement : ctype var_decl ";" ->
	| IDENT  var_or_atrib ";" ->
	| print_stat ";" ->
	| read_stat ";" ->
	| if_stat 	->
	| for_stat 	->
	| return_stat ";" ->
	| super_stat ";" ->
	| "{" stat_list "}" ->
	| break ";" ->
	| ; ->

var_decl : IDENT vector extra_var 	->

extra_var : "," IDENT vector extra_var 	->
	|				->

var_or_atrib -> var_decl	->
	| atrib_stat		->

atrib_stat : lvalue "=" expr_or_aloc 	->

print_stat : "print" expression 	->

read_stat : "read" IDENT lvalue 	->

if_stat : "if" "(" expression ")" statement else ->

else : "else" statement -> 
	|		->

for_stat : for "(" atrib_stat ";" expression ";" atrib_stat ")" statement -> 

return_stat : "return" expression? ->

super_stat : super "(" arg_list ")" 	->

stat_list : statement stat_list ->
	|			->

expr_or_aloc: expression 	->
	| aloc_expression 	->

expression : num_expression opt_expression 	-> //TODO

expression2 : "," expression expression2 	->
	| 					->

expression? : expression 	->
	|			->

expression0n : "[" expression "]" expression0n 	->
	| 						->

aloc_expression : "new" aloc_expr2

aloc_expr2 : IDENT aloc_expr3 ->
	| ctype "[" expression "]" expression0n ->

aloc_expr3 : "(" arg_list ")" ->
	| "[" expression " ]" expression0n ->

arg_list : expression expression2 	->
	| 				->

arg_list? : "(" arg_list ")" 	->
	|			->

opt_expression : rel_op num_expression 	->
	|				->

opt_term : pm_op term opt_term 	->
	|			->

num_expression : term opt_term ->

unary_expr : pm_op? factor ->

unary_vazio : mdm_op unary_expr unary_vazio 	->
	| 					->

term : unary_expr unary_vazio

factor: INT-CONST 		->
	| STRING-CONST 		->
	| "null" 		->
	| IDENT lvalue 		->
	| "(" expression ")" 	->



type : ctype 	->
	| IDENT ->

ctype : "int" 		->
	| "string" 	->

mdm_op : "*" 	->
	| "/" 	->
	| "%" 	->

rel_op : ">" 	->
	| "<" 	->
	| "<=" 	->
	| ">=" 	->
	| "==" 	->
	| "!=" 	->

pm_op : "+"	->
	| "-"	->

pm_op? : pm_op 	->
	|	->

vector : "[" INT-CONST "]" vector 	->
	| 				->

lvalue : "[" INT-CONST "]" lvalue 	->
	| "." IDENT arg_list? lvalue 	->
	|				->